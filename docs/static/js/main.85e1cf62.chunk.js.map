{"version":3,"sources":["components/appBar.js","components/textField.js","components/secondAppBar.js","components/groups.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","grow","menuButton","marginLeft","marginRight","props","classes","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","IconButton_default","color","aria-label","Menu_default","Typography_default","variant","Button_default","OutlinedTextFields","state","name","test","handleChange","event","_this","setState","Object","defineProperty","target","value","handleClickAddItem","add_item","this","TextField_default","id","label","fullWidth","classNames","dense","margin","onChange","InputProps","endAdornment","InputAdornment_default","onClick","Send_default","React","Component","theme","marginTop","SimpleAppBar","_this$props","textField","FolderList","selectedIndex","handleListItemClick","index","_this2","items","Fragment","List_default","map","item","ListItem_default","key","button","Avatar_default","Image_default","ListItemText_default","primary","secondary","ListItemSecondaryAction_default","Edit_default","width","backgroundColor","App","elements","handleChangeItems","new_item","mod_array","push","appBar","secondAppBar","groups","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uXA8CeA,2BApCA,CACbC,KAAM,CACJC,SAAU,GAEZC,KAAM,CACJD,SAAU,GAEZE,WAAY,CACVC,YAAa,GACbC,YAAa,KA2BFN,CAvBf,SAAsBO,GAAO,IACnBC,EAAYD,EAAZC,QACR,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQP,MACtBQ,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,SAAS,UACfL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYE,UAAWJ,EAAQJ,WAAYa,MAAM,UAAUC,aAAW,QACpET,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,OAEFD,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAYW,QAAQ,KAAKJ,MAAM,UAAUL,UAAWJ,EAAQL,MAA5D,QAGAM,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAQO,MAAM,WAAd,4FChBJM,6MACJC,MAAQ,CACNC,KAAM,iBACNC,KAAM,MAGRC,aAAe,SAAAF,GAAI,OAAI,SAAAG,GACrBC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACGN,EAAOG,EAAMK,OAAOC,YAIzBC,mBAAqB,WACnBN,EAAKtB,MAAM6B,SAASP,EAAKL,MAAMC,MAC/BI,EAAKC,SAAS,CAACJ,KAAMG,EAAKL,MAAMC,gFAGzB,IACCjB,EAAY6B,KAAK9B,MAAjBC,QAER,OACIC,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CACE6B,GAAG,iBACHC,MAAM,QACRC,WAAS,EACP7B,UAAW8B,IAAWlC,EAAQmC,OAC9BC,OAAO,QACPvB,QAAQ,WACRwB,SAAUR,KAAKV,aAAa,QAC5BmB,WAAY,CACVC,aACEtC,EAAAC,EAAAC,cAACqC,EAAAtC,EAAD,CAAgBI,SAAS,OACvBL,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEQ,aAAW,WACX+B,QAASZ,KAAKF,oBACf1B,EAAAC,EAAAC,cAACuC,EAAAxC,EAAD,kBAnCgByC,IAAMC,WAiDxBpD,uBA3DA,SAAAqD,GAAK,MAAK,CAEvBV,MAAO,CACLW,UAAW,KAwDAtD,CAAmBuB,GCtD5BgC,mLACK,IAAAC,EACuBnB,KAAK9B,MAA3BC,EADDgD,EACChD,QAAS4B,EADVoB,EACUpB,SAEjB,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQP,MACtBQ,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,SAAS,SAASG,MAAM,WAC9BR,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAAC8C,EAAD,CAAoBrB,SAAUA,cARfe,IAAMC,WAoBlBpD,uBA1BA,CACbC,KAAM,CACJC,SAAU,IAwBCF,CAAmBuD,gICb5BG,6MACFlC,MAAQ,CACJmC,cAAe,QAEnBC,oBAAsB,SAACC,GACnBhC,EAAKC,SAAS,CAAE6B,cAAeE,6EAEzB,IAAAC,EAAAzB,KAAAmB,EACqBnB,KAAK9B,MAAxBC,EADFgD,EACEhD,QAASuD,EADXP,EACWO,MACTJ,EAAkBtB,KAAKb,MAAvBmC,cAER,OACIlD,EAAAC,EAAAC,cAACF,EAAAC,EAAMsD,SAAP,KACIvD,EAAAC,EAAAC,cAAA,SAAIgD,GACJlD,EAAAC,EAAAC,cAACsD,EAAAvD,EAAD,CAAME,UAAWJ,EAAQP,MACpB8D,EAAMG,IAAI,SAACC,EAAMN,GAAP,OACPpD,EAAAC,EAAAC,cAACyD,EAAA1D,EAAD,CACI2D,IAAKR,EACLS,QAAM,EACNrB,QAAS,kBAAMa,EAAKF,oBAAoBC,KAExCpD,EAAAC,EAAAC,cAAC4D,EAAA7D,EAAD,KACAD,EAAAC,EAAAC,cAAC6D,EAAA9D,EAAD,MACCyD,GAED1D,EAAAC,EAAAC,cAAC8D,EAAA/D,EAAD,CAAcgE,QAAS,UAAYP,EAAMQ,UAAU,gBACnDlE,EAAAC,EAAAC,cAACiE,EAAAlE,EAAD,KACID,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYQ,aAAW,QACnBT,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,oBA5BXyC,IAAMC,WA2ChBpD,wBApDA,iBAAO,CACpBC,KAAM,CACJ6E,MAAO,OACPxB,UAAW,EACXyB,gBAAiB,WAgDN/E,CAAmB0D,GChClBsB,sNAtBdxD,MAAQ,CACNyD,SAAU,CAAC,KAAK,IAAI,IAAI,QAI1BC,kBAAoB,SAACC,GACnB,IAAIC,EAAYvD,EAAKL,MAAMyD,SAC3BG,EAAUC,KAAKF,GACftD,EAAKC,SAAS,CAAEmD,SAAUG,6EAEnB,IACCH,EAAa5C,KAAKb,MAAlByD,SACR,OACIxE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2E,EAAD,MACA7E,EAAAC,EAAAC,cAAC4E,EAAD,CAAcnD,SAAUC,KAAK6C,oBAC7BzE,EAAAC,EAAAC,cAAC6E,GAAD,CAAQzB,MAAOkB,YAjBP7B,cCGEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtF,EAAAC,EAAAC,cAACqF,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.85e1cf62.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n};\r\n\r\nfunction ButtonAppBar(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n            News\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nButtonAppBar.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(ButtonAppBar);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nconst styles = theme => ({\r\n\r\n  dense: {\r\n    marginTop: 8,\r\n  },\r\n\r\n});\r\n\r\n\r\n\r\nclass OutlinedTextFields extends React.Component {\r\n  state = {\r\n    name: 'Cat in the Hat',\r\n    test: '',\r\n  };\r\n\r\n  handleChange = name => event => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleClickAddItem = () => {\r\n    this.props.add_item(this.state.name);\r\n    this.setState({test: this.state.name});\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n        <TextField\r\n          id=\"outlined-dense\"\r\n          label=\"Dense\"\r\n\t\t      fullWidth\r\n          className={classNames(classes.dense)}\r\n          margin=\"dense\"\r\n          variant=\"outlined\"\r\n          onChange={this.handleChange('name')}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"Add item\"\r\n                  onClick={this.handleClickAddItem}\r\n                ><SendIcon />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n    );\r\n  }\r\n}\r\n\r\nOutlinedTextFields.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(OutlinedTextFields);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nimport OutlinedTextFields from './textField'\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n};\r\n\r\nclass SimpleAppBar extends React.Component {\r\n  render() {\r\n    const { classes, add_item } = this.props;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\" color=\"default\">\r\n          <Toolbar>\r\n            <OutlinedTextFields add_item={add_item}/>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSimpleAppBar.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(SimpleAppBar);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst styles = () => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: 4,\r\n    backgroundColor: 'white',\r\n  },\r\n});\r\n\r\n\r\nclass FolderList extends React.Component {\r\n    state = {\r\n        selectedIndex: null,\r\n    };\r\n    handleListItemClick = (index) => {\r\n        this.setState({ selectedIndex: index });\r\n    };\r\n    render () {\r\n        const { classes, items } = this.props;\r\n        const { selectedIndex } = this.state;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <b>{selectedIndex}</b>\r\n                <List className={classes.root}>\r\n                    {items.map((item, index) => (\r\n                        <ListItem\r\n                            key={index}\r\n                            button\r\n                            onClick={() => this.handleListItemClick(index)}\r\n                        >\r\n                            <Avatar>\r\n                            <ImageIcon />\r\n                            {item}\r\n                            </Avatar>\r\n                            <ListItemText primary={\"Photo #\" + item} secondary=\"Jan 9, 2014\" />\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton aria-label=\"Edit\">\r\n                                    <EditIcon />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nFolderList.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(FolderList);\r\n","import React, { Component } from 'react';\n\nimport ButtonAppBar from './components/appBar'\nimport SimpleAppBar from './components/secondAppBar'\nimport Groups from './components/groups'\n\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    elements: ['10','2','3','4']\n  }\n\n  \n  handleChangeItems = (new_item) => {\n    let mod_array = this.state.elements;\n    mod_array.push(new_item);\n    this.setState({ elements: mod_array });\n  };\n  render() {\n    const { elements } = this.state;\n    return (\n        <div className=\"App\">\n          <ButtonAppBar/>\n          <SimpleAppBar add_item={this.handleChangeItems}/>\n          <Groups items={elements}/>\n        </div>\n    );\n  }\n}\n\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}